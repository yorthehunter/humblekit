/* ==========================================================================
   Base Mixins
   ========================================================================== */
/**
* These mixins are needed for almost all parts of this project, so they are
* always included.
*/

/* Media breakpoint, super-simple version
   ========================================================================== */
/**
* 1. Sass magic that lets us pass content to the mixin. More reading:
*    http://krasimirtsonev.com/blog/article/SASS-content-directive-is-a-wonderful-thing
*/

@mixin at_breakpoint($media) {
  @if $media == xs {
    @media screen and (max-width: $media-width-xs) {
      @content; /* 1 */
    }
  } @else if $media == sm {
    @media screen and (max-width: $media-width-sm) and (min-width: ($media-width-xs + 1)) {
      @content;
    }
  } @else if $media == md {
    @media screen and (max-width: $media-width-md) and (min-width: ($media-width-sm + 1)) {
      @content;
    }
  } @else if $media == lg {
    @media screen and (max-width: $media-width-lg) and (min-width: ($media-width-md + 1)) {
      @content;
    }
  } @else if $media == xl {
    @media screen and (min-width: ($media-width-lg + 1)) {
      @content;
    }
  } @else if $media == ltxl {
    @media screen and (max-width: ($media-width-xl)) {
      @content
    }
  } @else if $media == ltlg {
    @media screen and (max-width: ($media-width-lg)) {
      @content
    }
  } @else if $media == ltmd {
    @media screen and (max-width: ($media-width-md)) {
      @content
    }
  } @else if $media == ltsm {
    @media screen and (max-width: ($media-width-sm)) {
      @content
    }
  } @else if $media == gtxs {
    @media screen and (min-width: ($media-width-xs + 1)) {
      @content
    }
  } @else if $media == gtsm {
    @media screen and (min-width: ($media-width-sm + 1)) {
      @content
    }
  }
}


/* Returns exponent
   ========================================================================== */

/**
* 1. Reset value
* 2. Positive integers get multiplied
* 3. Negative integers get divided. A number divided by itself is 1
* 4. Return the last value written
*/

@function exponent($base, $exponent) {
  $value: $base; /* 1 */
  @if $exponent > 1 { /* 2 */
    @for $i from 2 through $exponent {
      $value: $value * $base; } }
  @if $exponent < 1 { /* 3 */
    @for $i from 0 through -$exponent {
      $value: $value / $base; } }
  @return $value; /* 4 */
}


/* Font size and line height mixin
   ========================================================================== */

/**
* 1. Multiply by 1 unit (e.g. rem) to get the size in units
* 2. Do a little math and round it to get a pleasant and scalable line height.
*    This is a necessity for rem-based, beautiful vertical rhythm. At least, it
*    is for this system.
* 3. Optional: For aesthetics, adjust letter-space to -1% of font size.
*/

@mixin size_and_line($size, $unit, $margin:ceil($size / 2)) {
  $truesize: exponent($type-ratio, $size);

  font-size:   $truesize * 1#{$unit}; /* 1 */

  @if $margin == 0 {
    margin-bottom: 0;
  }
  @else {
    margin-bottom: #{$margin}rem;
  }

  @if $unit == "px" {
    line-height: ceil($truesize / $font-size-base) * 1rem; /* 2 */
  }
  @else if $unit == "rem" {
    line-height: ceil($truesize) * 1rem; /* 2 */
  }

  @if $letter-spacing-adjustment {
    letter-spacing: -($truesize / 100 * 1#{$unit}); /* 3 */
  }
}