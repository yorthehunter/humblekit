/*doc
---
title: "Customizing typography"
name: basic-typography-variables
category: typography
---

<pre>
  <code class="language-css">
$user-font-family-sans-serif: "Source Sans Pro" !default;
$user-font-family-serif:      null !default;

$font-family-sans-serif: $user-font-family-sans-serif, "Helvetica Neue", Helvetica, sans-serif;
$font-family-serif:      $user-font-family-serif, Georgia, Constantia, "Lucida Bright", Lucidabright, "Lucida Serif", Lucida, serif;
$font-family-monospace:  Menlo, Monaco, Consolas, "Courier New", monospace;
$font-family-base:       $font-family-sans-serif !default;

$text-base-color:  #444 !default;
$text-light-color: lighten($text-base-color, 33%);
$text-dark-color:  darken($text-base-color, 33%);

$small-size:      65 !default;
$small-size-unit: "%" !default;
  </code>
</pre>

*/

/* Basic font variables
   ========================================================================== */

/**
* 1. Optional: User font family definition. Add a font or fonts as a variable
*    and it will be injected into the site font family (serif or sans).
* 2. $font-family-base defines which style of font (defined before) to use as
*    default for the site. $font-family-sans-serif by default.
* 3. Default color for text. If using dark on light, avoid solid black (#000).
*    This is just good practice and looks nicer, too.
* 4. Some variables for <small> text. Accepts a size and a unit.
*/

$user-font-family-sans-serif: null !default; /* 1 */
$user-font-family-serif:      null !default;

$font-family-sans-serif: $user-font-family-sans-serif, "Helvetica Neue", Helvetica, sans-serif;
$font-family-serif:      $user-font-family-serif, Georgia, Constantia, "Lucida Bright", Lucidabright, "Lucida Serif", Lucida, serif;
$font-family-monospace:  Menlo, Monaco, Consolas, "Courier New", monospace;
$font-family-base:       $font-family-sans-serif !default; /* 2 */

$text-base-color:  #444 !default; /* 3 */
$text-light-color: lighten($text-base-color, 33%);
$text-dark-color:  darken($text-base-color, 33%);

$small-size:      65 !default; /* 4 */
$small-size-unit: "%" !default;


/* Headings variables
   ========================================================================== */

$headings-font-family: $font-family-serif !default;
$headings-font-weight: $font-weight-thick !default;
$headings-color: inherit !default;
$headings-weight: $font-weight-thick !default;


/* Font size variables
   ========================================================================== */

/**
* I choose not to use classes or variables with the greek naming convention
* (i.e. ".alpha, $beta, etc.")
* I find it easier not to have to learn new languages (however common) nor
* have to think about (however briefly) a class and its implication.
*
* In this numerical naming convention, it's easier to associate lower
* numbers with larger text, simply because that convention is already in
* place with heading markup (h1 - h6).
*
* Also included here are a few more font sizes with the sm, md, lg
* naming convention.
*
* 1. Expressed as progressive steps in scale (as integers). See
*    _variables.css.scss for more information.
*    Basically, the type grows (or shrinks) from a base font size variable
*    at a rate that is exponential according to the integers below.
*    If this makes no sense, it might be easier to try changing these numbers,
*    the $font-size-base, or the $type-ratio and seeing the results in your
*    application. Tweak them to get something that works for you.
*/

$f-xl:  11; /* 1 */
$f-lg:  9;
$f1:    7;
$f2:    5;
$f3:    4;
$f4:    3;
$f5:    1;
$f-md:  $f5;
$f6:    0;
$f-sm:  $f6;
$f-xs: -1;


/*doc
---
title: Typography
name: basic-typography
category: typography
---

The basic typography and vertical rhythm is already setup by default. It's
all variable-driven and moderately easy to modify.

*/

/* Typography basics
   ========================================================================== */
/**
* 1. This line sets up our rem size for the site. We set it up as the
*    $font-size-base so we can keep tight control over the font sizes and
*    vertical rhythm.
*    You can test out what a change to this number looks like by changing it
*    to, oh say, 30px and refreshing the page. Everything will scale up
*    drastically because everything in this app is rem-based :}
*/

html, body { font-size: $font-size-base; } /* 1 */

body {
  line-height: 1rem;
  font-family: $font-family-base;
  font-weight: $font-weight-base;
  color:       $text-base-color;
}

strong,
b {
  font-weight: $font-weight-thick;
}

em,
i {
  font-style: italic;
}


/* Font size placeholders
   ========================================================================== */
/**
* @extend these placeholders in modules to give a component a specific font size.
*/

%f1 { @include size_and_line($f1, rem); }
%f2 { @include size_and_line($f2, rem); }
%f3 { @include size_and_line($f3, rem); }
%f4 { @include size_and_line($f4, rem); }
%f5 { @include size_and_line($f5, rem); }
%f6 { @include size_and_line($f6, rem); }


/*doc
---
title: "Headings and paragraphs"
name: headings-and-paragraphs
category: typography
---

Headings are given some default styling to give them a typographical
hierarchy. There is more than one school of thought when using headings in
markup. See this example:

<header>
  <h1>This is a giant header</h1>
</header>

Your output is dependent on the styles given to h1{}. If you would rather
present your h1 as a smaller font, maybe more like an h2, then your markup
could look like this:

<header>
  <h1 class="h2">This is a moderately big header.</h1>
</header>

Semantically, you are saying "this heading is as important as an h1, but
should present itself as an h2".

Despite being a semantically correct and easily identifiable solution, it
doesn't always sit well in a shared development environment.
Therefore:

<header>
  <h2>This is a moderately big header, too.</h2>
</header>

The code above works, but doesn't say as much semantically. YMMV.


```html_example

<header>
  <h1 class="h2">This is a moderately big header.</h1>
</header>
<p>And this is some paragraph text.</p>

```
*/

/**
* 1. The .p class can be used to describe paragraph text when an actual <p>
*    isn't used. E.g. <div class="p">Text goes here.</div>
*/

h1,.h1,h2,.h2,h3,.h3,h4,.h4,h5,.h5,h6,.h6 {
  font-weight: $headings-weight;
  color: $headings-color;
  text-rendering: optimizeLegibility;
}

h1,.h1 { @extend %f1; }

h2,.h2 { @extend %f2; }

h3,.h3 { @extend %f3; }

h4,.h4 { @extend %f4; }

h5,.h5,
p,.p, /* 1 */
dl,ol,ul { @extend %f5; }

h6,.h6 { @extend %f6; }

%f-xl,
.f-xl {
  @include size_and_line($f-xl, rem);
}
%f-lg,
.f-lg {
  @include size_and_line($f-lg, rem);
}
%f-md,
.f-md {
  @include size_and_line($f-md, rem);
}
%f-sm,
.f-sm {
  @include size_and_line($f-sm, rem);
}
%f-xs,
.f-xs {
  @include size_and_line($f-xs, rem);
}


/*doc
---
title: "Helper classes"
name: helper-typography-classes
category: typography
---

The following are some utility classes that help control the visuals of your
typography.

**A note about placeholders:**

Why include placeholders along with classes? Why not just use one or the other?
Because there are cases to be made for each at different times.
It's sometimes less meaningful to use a class (or @extend a placeholder).
I've found cases for both in all of my projects, so I am proactively trying
to create placeholders for classes that I *may* later want to @extend.
If this makes no sense, please feel free to ignore and do what you please :}

Oh, by the way: placeholders do not compile on their own, so there's no need
to worry about bloating your code. However, classes DO compile, whether you
use them or not, so stay cautious, friends.

```html_example

<div class="u">Underline text</div>
<sup>Superscript text</sup>
<br />
<sub>Subscript text</sub>
<br />
<div class="small">Small text</div>
<div class="uppercase">Uppercase text</div>
<div class="strike">Strikethrough text</div>
<div class="text-l">Align left</div>
<div class="text-c">Align center</div>
<div class="text-r">Align right</div>
<div class="light">Light text</div>
<div class="dark">Dark text</div>
<div class="thin">Thin text</div>
<div class="thick">Thick text</div>
<div class="normal">Normal weight text</div>
<div class="line1">Line height of 1 rem</div>
<div class="line2">Line height of 2 rem</div>
<div class="line3">Line height of 3 rem</div>
<div class="line4">Line height of 4 rem</div>

```
*/


/**
* 1. I decided I liked this enough to put it in. <sub> and <sup> now have life.
*    Based on this: https://gist.github.com/unruthless/413930
*
* 2. Line height helpers: This seems a little over-the-top-micro-managey, but
*    since I've come across times where this is particularly useful, I've
*    included a few helpful classes. It's worth it, I think.
*/

%u,
.u {
  text-decoration: underline;
}

sub, sup {                  /* 1 */
  font-size: $small-size#{$small-size-unit};
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5rem;
}

sub {
  bottom: -0.25rem;
}

%small,
small,
.small {
  font-size: $small-size#{$small-size-unit};
  line-height: 1rem;
}

%uppercase,
.uppercase {
  text-transform: uppercase;
}

%strike,
.strike {
  text-decoration: line-through;
}

%text-l,
.text-l { text-align: left   !important; }
%text-c,
.text-c { text-align: center !important; }
%text-r,
.text-r { text-align: right  !important; }

%light,
.light { color: $text-light-color; }

%dark,
.dark { color: $text-dark-color; }

%thin,
.thin { font-weight: $font-weight-thin; }

%thick,
.thick { font-weight: $font-weight-thick; }

%normal,
.normal {
  font-weight: $font-weight-base !important;
}

%line1,
.line1 { line-height: 1rem !important; } /* 2 */
%line2,
.line2 { line-height: 2rem !important; }
%line3,
.line3 { line-height: 3rem !important; }
%line4,
.line4 { line-height: 4rem !important; }


/*doc
---
title: "Responsive text"
name: responsive-text
category: typography
---

`f-xl` `f-lg` `h1` `h2` `h3` `h4` and `p` classes react responsively to change the
font-size at breakpoints. This will scale down font sizes for smaller
devices for better readability.


```html_example

<div class="f-xl">XL text</div>
<div class="f-lg">LG text</div>
<div class="h1">h1 text</div>
<div class="h2">h2 text</div>
<div class="h3">h3 text</div>
<div class="h4">h4 text</div>
<div class="h5">h5 text</div>
<div class="h6">h6 text</div>
<div class="p">p text</div>

```
*/

@include at_breakpoint(ltmd) {
  .f-xl  {
    @include size_and_line(($f-xl - 2), rem);
  }
  .f-lg  {
    @include size_and_line(($f-lg - 2), rem);
  }
  .h1  {
    @include size_and_line(($f1 - 1), rem);
  }
  .h2 {
    @include size_and_line(($f2 - 1), rem);
  }
  .h3 {
    @include size_and_line(($f3 - 1), rem);
  }
}

@include at_breakpoint(ltsm) {
  .f-lg, .f-xl {
    @include size_and_line(($f-lg - 3), rem);
  }
  .h1 {
    @include size_and_line(($f1 - 2), rem);
  }
  .h2 {
    @include size_and_line(($f2 - 2), rem);
  }
  .h3, .p, .h4 {
    @include size_and_line(($f3 - 2), rem);
  }
}


/*doc
---
title: "Responsive text alignment"
name: responsive-text-alignment
category: typography
---

Some utility classes for forcing the alignment of text responsively.
A basic example is using centered text for impact at a larger scale. This
may not visually work as well on a small screen, so we would include a
class that would align the text to the left.


```html_example

<h1 class="h3 text-c text-l-xs">
  This Heading will Align Center by Default, and Left on xs Screens
</h1>

```
*/

@include at_breakpoint(xs) {
  %text-l-xs,
  .text-l-xs { text-align: left   !important; float: none !important; }
  %text-c-xs,
  .text-c-xs { text-align: center !important; float: none !important; }
  %text-r-xs,
  .text-r-xs { text-align: right  !important; float: none !important; }
}
