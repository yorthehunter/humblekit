/*doc
---
title: "Customizing typography"
name: basic-typography-variables
category: base - typography
---

*Overwrite these variables in `_custom_variables.scss` to change these defaults.*

```
$user-font-family-sans-serif: "Source Sans Pro" !default;
$user-font-family-serif:      null !default;

$font-family-sans-serif: $user-font-family-sans-serif, "Helvetica Neue", Helvetica, sans-serif;
$font-family-serif:      $user-font-family-serif, Georgia, Constantia, "Lucida Bright", Lucidabright, "Lucida Serif", Lucida, serif;
$font-family-monospace:  Menlo, Monaco, Consolas, "Courier New", monospace;
$font-family-base:       $font-family-sans-serif !default;

$text-base-color:  #444 !default;
$text-light-color: lighten($text-base-color, 33%);
$text-dark-color:  darken($text-base-color, 33%);

$small-size:      0.8 !default;
$small-size-unit: em  !default;
```

*/


/*doc
---
title: Typography
name: basic-typography
category: base - typography
---

The basic typography and vertical rhythm is already setup by default. It's
all variable-driven and moderately easy to modify.

*/

/* Typography basics
   ========================================================================== */
/**
* 1. This line sets up our rem size for the site. We set it up as the
*    $font-size-base so we can keep tight control over the font sizes and
*    vertical rhythm.
*    You can test out what a change to this number looks like by changing it
*    to, oh say, 30px and refreshing the page. Everything will scale up
*    drastically because everything in this app is rem-based :}
*/

@mixin typography_styles {
  html, body { font-size: $font-size-base; } /* 1 */

  body {
    line-height: 1rem;
    font-family: $font-family-base;
    font-weight: $font-weight-base;
    color:       $text-base-color;
  }


  /* Font size placeholders
     ========================================================================== */
  /**
  * @extend these placeholders in modules to give a component a specific font size.
  */

  %f1 { @include size_and_line($f1, rem); }
  %f2 { @include size_and_line($f2, rem); }
  %f3 { @include size_and_line($f3, rem); }
  %f4 { @include size_and_line($f4, rem); }
  %f5 { @include size_and_line($f5, rem); }
  %f6 { @include size_and_line($f6, rem); }


  /*doc
  ---
  title: "Headings and paragraphs"
  name: headings-and-paragraphs
  category: base - typography
  ---

  Headings are given some default styling to give them a typographical
  hierarchy. There is more than one school of thought when using headings in
  markup. See this example:

```
<h1>This is a giant header</h1>
```

  Your output is dependent on the styles given to h1{}. If you would rather
  present your h1 as a smaller font, maybe more like an h2, then your markup
  could look like this:

```
<h1 class="h2">This is a moderately big header.</h1>
```

  Semantically, you are saying "this heading is as important as an h1, but
  should present itself as an h2".

  Despite being a semantically correct and easily identifiable solution, it
  doesn't always feel right (or feels excessive) in a shared development
  environment.
  Therefore:

```
<h2>This is a moderately big header, too.</h2>
```

  The code above works, but doesn't say as much semantically. YMMV.


  ```html_example
  <header>
    <h1 class="h2">This is a moderately big header.</h1>
  </header>
  <p>And this is some paragraph text.</p>
  ```
  */

  /**
  * 1. The .p class can be used to describe paragraph text when an actual <p>
  *    isn't used. E.g. <div class="p">Text goes here.</div>
  */

  h1,.h1,h2,.h2,h3,.h3,h4,.h4,h5,.h5,h6,.h6 {
    font-weight: $headings-weight;
    color: $headings-color;
    text-rendering: optimizeLegibility;
  }

  h1,.h1 { @extend %f1; }

  h2,.h2 { @extend %f2; }

  h3,.h3 { @extend %f3; }

  h4,.h4 { @extend %f4; }

  h5,.h5,
  p,.p, /* 1 */
  dl,ol,ul { @extend %f5; }

  h6,.h6 { @extend %f6; }

  %f-xl,
  .f-xl {
    @include size_and_line($f-xl, rem);
  }
  %f-lg,
  .f-lg {
    @include size_and_line($f-lg, rem);
  }
  %f-md,
  .f-md {
    @include size_and_line($f-md, rem);
  }
  %f-sm,
  .f-sm {
    @include size_and_line($f-sm, rem);
  }
  %f-xs,
  .f-xs {
    @include size_and_line($f-xs, rem);
  }


  /*doc
  ---
  title: "Helper classes"
  name: helper-typography-classes
  category: base - typography
  ---

  The following are some utility classes that help control the visuals of your
  typography.

  **A note about placeholders:**

  Why include placeholders along with classes? Why not just use one or the other?
  Because there are cases to be made for each at different times.
  It's sometimes less meaningful to use a class (or @extend a placeholder).
  I've found cases for both in all of my projects, so I am proactively trying
  to create placeholders for classes that I *may* later want to @extend.
  If this makes no sense, please feel free to ignore and do what you please :}

  Oh, by the way: placeholders do not compile on their own, so there's no need
  to worry about bloating your code. However, classes DO compile, whether you
  use them or not, so stay cautious, friends.

  ```html_example
  <div class="u">Underline text</div>
  <sup>Superscript text</sup>
  <br />
  <sub>Subscript text</sub>
  <br />
  <div class="small">Small text</div>
  <div class="uppercase">Uppercase text</div>
  <div class="strike">Strikethrough text</div>
  <div style="width: 250px;" class="truncated">
    Lorem ipsum dolor sit amet, nibh elit inermis ex eum, at quot verear vix, sed no unum dicam. Et pro possim repudiandae mediocritatem. Noster petentium expetenda ea pro, diam elit ridens id pro. Deserunt praesent ut vel, ad est natum habeo abhorreant.
  </div>
  <div class="text-l">Align left</div>
  <div class="text-c">Align center</div>
  <div class="text-r">Align right</div>
  <div class="light">Light text</div>
  <div class="dark">Dark text</div>
  <div class="thin">Thin text</div>
  <div class="thick">Thick text</div>
  <div class="normal">Normal weight text</div>
  <div class="line1">Line height of 1 rem</div>
  <div class="line2">Line height of 2 rem</div>
  <div class="line3">Line height of 3 rem</div>
  <div class="line4">Line height of 4 rem</div>
  ```
  */


  /**
  * 1. I decided I liked this enough to put it in. <sub> and <sup> now have life.
  *    Based on this: https://gist.github.com/unruthless/413930
  *
  * 2. Line height helpers: This seems a little over-the-top-micro-managey, but
  *    since I've come across times where this is particularly useful, I've
  *    included a few helpful classes. It's worth it, I think.
  */

  strong,
  b,
  %b,
  .b {
    font-weight: $font-weight-thick;
  }

  em,
  i,
  %i,
  .i {
    font-style: italic;
  }

  u,
  %u,
  .u {
    text-decoration: underline;
  }

  pre,
  code,
  %code,
  .code {
    font-family: $font-family-monospace;
    white-space: pre-wrap;
    line-height: 2rem;
    font-size: 1rem;
  }

  %sub, %sup,
  sub, sup {                  /* 1 */
    font-size: $small-size#{$small-size-unit};
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }

  %sup,
  sup {
    top: -0.5rem;
  }

  %sub,
  sub {
    bottom: -0.25rem;
  }

  %small,
  small,
  .small {
    font-size: $small-size#{$small-size-unit};
    line-height: 1em;
  }

  %uppercase,
  .uppercase {
    text-transform: uppercase;
  }

  %strike,
  .strike {
    text-decoration: line-through;
  }

  %truncated,
  .truncated {
    overflow:      hidden;
    white-space:   nowrap;
    text-overflow: ellipsis;
  }

  %text-l,
  .text-l { text-align: left   !important; }
  %text-c,
  .text-c { text-align: center !important; }
  %text-r,
  .text-r { text-align: right  !important; }

  %light,
  .light { color: $text-light-color; }

  %dark,
  .dark { color:  $text-dark-color; }

  %thin,
  .thin {   font-weight:  $font-weight-thin; }

  %thick,
  .thick {  font-weight: $font-weight-thick; }

  %normal,
  .normal { font-weight: $font-weight-base !important; }

  %line1,
  .line1 { line-height: 1rem !important; } /* 2 */
  %line2,
  .line2 { line-height: 2rem !important; }
  %line3,
  .line3 { line-height: 3rem !important; }
  %line4,
  .line4 { line-height: 4rem !important; }


  /*doc
  ---
  title: "Responsive text"
  name: responsive-text
  category: base - typography
  ---

  `f-xl` `f-lg` `h1` `h2` `h3` `h4` and `p` classes react responsively to change the
  font-size at breakpoints. This will scale down font sizes for smaller
  devices for better readability.


  ```html_example
  <div class="f-xl">XL text</div>
  <div class="f-lg">LG text</div>
  <div class="h1">h1 text</div>
  <div class="h2">h2 text</div>
  <div class="h3">h3 text</div>
  <div class="h4">h4 text</div>
  <div class="h5">h5 text</div>
  <div class="h6">h6 text</div>
  <div class="p">p text</div>
  ```
  */

  @include at_breakpoint(ltmd) {
    .f-xl  {
      @include size_and_line(($f-xl - 2), rem);
    }
    .f-lg  {
      @include size_and_line(($f-lg - 2), rem);
    }
    .h1  {
      @include size_and_line(($f1 - 1), rem);
    }
    .h2 {
      @include size_and_line(($f2 - 1), rem);
    }
    .h3 {
      @include size_and_line(($f3 - 1), rem);
    }
  }

  @include at_breakpoint(ltsm) {
    .f-lg, .f-xl {
      @include size_and_line(($f-lg - 3), rem);
    }
    .h1 {
      @include size_and_line(($f1 - 2), rem);
    }
    .h2 {
      @include size_and_line(($f2 - 2), rem);
    }
    .h3, .h4 {
      @include size_and_line(($f3 - 2), rem);
    }
    .p, .h5 {
      @include size_and_line(($f5 - 1), rem);
    }
  }


  /*doc
  ---
  title: "Responsive text alignment"
  name: responsive-text-alignment
  category: base - typography
  ---

  Some utility classes for forcing the alignment of text responsively.

  Basic example: On larger screens, center some heading text for impact.
  On smaller viewports, you might want that text forced back to the left.
  In that case, we apply two classes: `.text-c` to center the text by
  default, and `.text-l-xs` to force left-aligned text on mobile viewports.


  ```html_example
  <h1 class="h3 text-c text-l-xs">
    This Heading will Align Center by Default, and Left on xs Screens
  </h1>
  ```
  */

  @include at_breakpoint(xs) {
    %text-l-xs,
    .text-l-xs { text-align: left   !important; float: none !important; }
    %text-c-xs,
    .text-c-xs { text-align: center !important; float: none !important; }
    %text-r-xs,
    .text-r-xs { text-align: right  !important; float: none !important; }
  }
}