  /*doc
  ---
  title: Flexbox
  name: flexbox
  category: elements - flexbox
  ---

  Flexbox is a way to create a better set of fluid elements in modern browsers.
  The standard flexbox consists of a parent container and any number of child elements.

  Use `.flex-container` as the parent and `.flex-item` as the child.

  Flexbox styles are still being worked on and can be considered "experimental"

  ```html_example
  <div class="flex-container">
    <div class="flex-item flex-left f-lg bordered border-xs"> 1 </div>
    <div class="flex-item flex-left f-lg bordered border-xs"> 2 </div>
    <div class="flex-item flex-left f-lg bordered border-xs"> 3 </div>
  </div>
  ```

  Use `.flex-N` where N is a number from 0 to 4 to control the relative width of a `flex-item`.

  ```html_example
  <div class="flex-container">
    <div class="flex-item flex-1 p1 bg-gray-lightest">Flex 1</div>
    <div class="flex-item flex-2 p1 bg-gray-light">Flex 2</div>
    <div class="flex-item flex-3 p1 bg-gray-lightest">Flex 3</div>
    <div class="flex-item flex-4 p1 bg-gray-light">Flex 4</div>
  </div>
  ```

  */

@mixin flex_styles {

  // Parent properties
  %flex-container,
  .flex-container {
    display: flex;
  }

  .flex-wrap, %flex-wrap { flex-wrap: wrap; }

  .flex-reverse, %flex-reverse   { flex-direction: row-reverse; }
  .flex-vertical, %flex-vertical {
    flex-direction: column;
    &.flex-reverse, &%flex-reverse {
      flex-direction: column-reverse;
    }
  }
  .flex-vertical-reverse, %flex-vertical-reverse { flex-direction: column-reverse; }

  .flex-t,   %flex-t     { align-items: flex-start; }
  .flex-c,   %flex-c     { align-items: center; }
  .flex-b,   %flex-b,
  .flex-end, %flex-end   { align-items: flex-end; }
  .flex-full, %flex-full { align-items: stretch; }

  .flex-content-start,  %flex-content-start  { justify-content: flex-start; }
  .flex-content-spaced, %flex-content-spaced { justify-content: space-around; }
  .flex-content-grid,   %flex-content-grid   { justify-content: space-between; }
  .flex-content-c,      %flex-content-c      { justify-content: center; }
  .flex-content-end,    %flex-content-end    { justify-content: flex-end; }

  // Child properties
  %fi,        .fi,
  %flex-item, .flex-item { flex: 1 0 auto; }

  %fi-start,        .fi-start,
  %flex-item-start, .flex-item-start { align-self: flex-start; }
  %fi-c,            .fi-c,
  %flex-item-c,     .flex-item-c     { align-self: center; }
  %fi-end,          .fi-end,
  %flex-item-end,   .flex-item-end   { align-self: flex-end; }
  %fi-full,         .fi-full,
  %flex-item-full,  .flex-item-full  { align-self: stretch; }

  %flex-0,    .flex-0    { flex: 0; }
  %flex-2,    .flex-2    { flex: 2; }
  %flex-4,    .flex-4    { flex: 4; }
  %flex-8,    .flex-8    { flex: 8; }


  /*doc
  ---
  title: "Flex list"
  name: flexlist
  category: elements - flexbox
  ---

  Use `.list-flex` on lists to create `li` children as flexible sections.

  You can think of flex lists as a way to present list information like in a table,
  but that isn't necessarily tabular data.

  Flexbox styles are still being worked on and can be considered "experimental"

  ```html_example
  <ul class="list-flex">
    <li class="list-header bg-gray-lightest"> List header </li>
    <li class="bg-gray-light"> List item </li>
    <li class="bg-gray-lightest"> List item </li>
    <li class="bg-gray-light"> List item </li>
    <li class="bg-gray-lightest"> List item </li>
  </ul>
  ```

  */

  %list-flex,
  .list-flex {
    @extend %flex-container !optional;
    @extend %m0 !optional;
    list-style: none;
    padding-left: 0;

    li {
      @extend %flex-item !optional;
      @extend %flex-2 !optional;
      @extend %m0 !optional;

      &.list-header {
        @extend %text-r !optional;
        @extend %flex-4 !optional;
        @extend %px1 !optional;
      }
    }
  }
}
