/*doc
---
title: Grids
name: grid
category: structure - grid
---

1. Use `.grid` on your parent container for *only* the area you want to grid
2. Use `.g` and a fraction class (e.g. `._1-2`) on the child of the grid
3. If you want responsive grids (different widths at different breakpoints), then suffix your fraction class with
   one of these: `xs` `sm` `md` `lg`. Any suffix you add will work for any breakpoint equal to or smaller
   (i.e. `_1-2-lg` will make a column that is 50% of its parent at large breakpoints and below)
4. Responsive grids "overwrite" each other; that is, `._1-1-xs` will take effect at the smallest breakpoint, even
   if you also include `._1-2-sm`. This is how it is supposed to work. Examples to follow.

```html_example
<section class="grid">
  <div class="g _1-2">
    <p class="p1 bg-gray">_1-2 column width</p>
  </div>
  <div class="g _1-4">
    <p class="p1 bg-gray">_1-4 column width</p>
  </div>
  <div class="g _1-4">
    <p class="p1 bg-gray">_1-4 column width</p>
  </div>
</section>
```

#####Responsive grids
```html_example
<section class="grid">
  <div class="g _1-1-sm _1-2-lg _1-4">
    <p class="p1 bg-gray">1/4 at XL, 1/2 at LG to MD, 1/1 at SM and below</p>
  </div>
  <div class="g _1-1-sm _1-2-lg _1-4">
    <p class="p1 bg-gray">1/4 at XL, 1/2 at LG to MD, 1/1 at SM and below</p>
  </div>
  <div class="g _1-1-sm _1-2-lg _1-4">
    <p class="p1 bg-gray">1/4 at XL, 1/2 at LG to MD, 1/1 at SM and below</p>
  </div>
  <div class="g _1-1-sm _1-2-lg _1-4">
    <p class="p1 bg-gray">1/4 at XL, 1/2 at LG to MD, 1/1 at SM and below</p>
  </div>
</section>
```
*/

@mixin flex_grid_styles {

  %grid,
  .grid {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    margin-left:  -($grid-gutter/2);
    margin-right: -($grid-gutter/2);
  }

  %g,
  .g {
    flex: 1 1 50px;
    padding-left:  ($grid-gutter/2);
    padding-right: ($grid-gutter/2);
    margin-top:    auto;
    margin-bottom: auto;
  }

  %grid--vert-t,
  .grid--vert-t {
    align-items: flex-start;
  }

  %grid--vert-b,
  .grid--vert-b {
    align-items: flex-end;
  }

  %grid--vert-c,
  .grid--vert-c {
    align-items: center;
  }

  %grid--center,
  .grid--center {
    justify-content: center;
  }

  %grid--nopad,
  .grid--nopad {
    & > %g,
    & > .g {
      padding-left:  0;
      padding-right: 0;
    }
  }

  // Sets up basic column sizing (e.g. ._1-1, ._3-4, .2-3)
  @for $i from 1 through $max-columns {
    @for $j from $i through $max-columns {
      $col_width: $i / $j;
      %_#{$i}-#{$j},
      ._#{$i}-#{$j} {
        flex: 0 0 ($col_width * 100%);
      }
    }
  }

  // Sets up breakpoint column sizing (e.g. ._1-1-xs, ._3-4-md, .2-3-xl)
  @each $breakpoint in $base-sizes {
    $bp: nth($breakpoint, 5);
    $short: nth($breakpoint, 1);
    @include at_breakpoint(#{$bp}) {
      @for $i from 1 through $max-columns {
        @for $j from $i through $max-columns {
          $col_width: $i / $j;
          %_#{$i}-#{$j}-#{$short},
          ._#{$i}-#{$j}-#{$short} {
            flex: 0 0 ($col_width * 100%);

            &:after {
              @if $grid-debug == true {
                content: $bp;
              }
            }
          }
        }
      }
    }
  }
}