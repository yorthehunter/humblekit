
/*doc
---
title: Grids
name: grid
category: structure - grid
---

<ol>
  <li>Start by containing a section of content that you intend to grid with the class `grid`</li>
  <li>The child element needs two classes: `g` to set up the grid-like qualities and a fractional width like `_1-2`</li>
  <li>If you want responsive grids (grids that are different at a particular breakpoint), then add a suffix: `xs` `sm` `md` `lg`.
   Any suffix you add will work for any breakpoint equal to or smaller (i.e. `_1-2-lg` will make a column that is 50% of its parent at large breakpoints and below, unless you specify another responsive grid size)</li>
</ol>


```html_example

<section class="grid">
  <div class="g _1-2">
    <div class="p1" style="background-color: #BBC;">_1-2 column width</div>
  </div>
  <div class="g _1-4">
    <div class="p1" style="background-color: #BBC;">_1-4 column width</div>
  </div>
  <div class="g _1-4">
    <div class="p1" style="background-color: #BBC;">_1-4 column width</div>
  </div>
</section>

<hr />

<h2 class="h4">Responsive grids</h2>
<section class="grid">
  <div class="g _1-2-lg _1-1">
    <div class="p1" style="background-color: #BBC;">_1-2 column width at large breakpoint</div>
  </div>
  <div class="g _1-4-lg _1-1">
    <div class="p1" style="background-color: #BBC;">_1-2 column width at large breakpoint</div>
  </div>
  <div class="g _1-4-lg _1-1">
    <div class="p1" style="background-color: #BBC;">_1-2 column width at large breakpoint</div>
  </div>
</section>

```
*/

@mixin grid_styles {
  .grid {
    list-style:     none;
    margin-left:   -$grid-gutter;
    padding:        0;
    font-size:      0; // Fixes inline-block spacing
  }

  .g {
    display:        inline-block;
    padding-left:   $grid-gutter;
    vertical-align: top;
    width:          100%;
    font-size:      $font-size-base; // Reset font size appropriately
  }

  // Sets up basic column sizing (e.g. ._1-1, ._3-4, .2-3)
  @for $i from 1 through $max-columns {
    @for $j from $i through $max-columns {
      $col_width: $i / $j;
      %_#{$i}-#{$j},
      ._#{$i}-#{$j} {
        width: $col_width * 100%;
      }
    }
  }

  // Sets up breakpoint column sizing (e.g. ._1-1-xs, ._3-4-md, .2-3-xl)
  @each $breakpoint in $base-sizes {
    $bp: nth($breakpoint, 5);
    $short: nth($breakpoint, 1);
    @include at_breakpoint(#{$bp}){
      @for $i from 1 through $max-columns {
        @for $j from $i through $max-columns {
          $col_width: $i / $j;
          %_#{$i}-#{$j}-#{$short},
          ._#{$i}-#{$j}-#{$short} {
            width: $col_width * 100%;
          }
        }
      }
    }
  }


  /*doc
  ---
  title: "Grid utility classes"
  name: grid-utility-classes
  category: structure - grid
  ---

  Grid utility classes extend the .grid class.

  ```html_example

  <h2 class="h4">Reverses grid direction from what is displayed in the markup</h2>

  <section class="grid grid-reverse">
    <div class="g _1-2">
      <div class="p1" style="background-color: #BBC;">Content #1</div>
    </div>
    <div class="g _1-4">
      <div class="p1" style="background-color: #BBC;">Content #2</div>
    </div>
    <div class="g _1-4">
      <div class="p1" style="background-color: #BBC;">Content #3</div>
    </div>
  </section>

  <hr />

  <h2 class="h4">Centered grid</h2>
  <section class="grid grid-c">
    <div class="g _1-6">
      <div class="p1" style="background-color: #BBC;">_1-6 column width</div>
    </div>
    <div class="g _1-3">
      <div class="p1" style="background-color: #BBC;">_1-3 column width</div>
    </div>
    <div class="g _1-6">
      <div class="p1" style="background-color: #BBC;">_1-6 column width</div>
    </div>
  </section>

  <hr />

  <h2 class="h4">Right align grid</h2>
  <section class="grid grid-r">
    <div class="g _1-6">
      <div class="p1" style="background-color: #BBC;">_1-6 column width</div>
    </div>
    <div class="g _1-3">
      <div class="p1" style="background-color: #BBC;">_1-3 column width</div>
    </div>
    <div class="g _1-6">
      <div class="p1" style="background-color: #BBC;">_1-6 column width</div>
    </div>
  </section>

  ```
  */

  // Reverse order grids
  %grid-reverse,
  .grid-reverse {
    direction: rtl;
    text-align: left;

    > .g {
      direction: ltr;
      text-align: left;
    }
  }

  // Grid columns from the center
  %grid-c,
  .grid-c {
    text-align: center;

    > .g {
      text-align: left;
    }
  }

  // Grid columns from the right
  %grid-r,
  .grid-r {
    text-align: right;

    > .g {
      text-align: left;
      margin-right: 0;
    }
  }

  // Remove gutter for flush columns
  %grid-nopad,
  .grid-nopad {
    margin-left: 0;

    > .g {
      padding-left: 0;
    }
  }
}