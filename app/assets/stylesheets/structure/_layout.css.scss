/*doc
---
title: "Customizing layout"
name: layout-variables
category: structure
---

<pre>
  <code class="language-css">
$hr-color:     rgba(0,0,0,0.1) !default;
$margin-base:  1rem !default;
$padding-base: $margin-base !default;
  </code>
</pre>
**Note:**
*Margins and padding are defined in increments of rem by default*

*/


/*doc
---
title: "Margin helpers"
name: margin-helpers
category: structure
---

Use margin and padding helpers to keep vertical rhythm. Micro classes like
this help maintain the intended design, while keeping css size low.

However, _sometimes_ it's easier for long-term maintenance to extend styles
for margin and padding in another class.

Examples:

Bad:

`.myModule {
  margin-bottom: 30px;
}`


Decent:

`.myClass {
  @extend %mb3;
  @extend %p1;
}`

This will produce the output css:

`.myClass { margin-bottom: 3rem; padding: 1rem; }`

But necessitates the use of placeholders. However, this might be easier to
maintain for your particular application.


Better:

<div class="myClass mb4 p1">
  This module has .myClass, margin-bottom of 4rem, and a padding
  of 1rem on all sides. It's obvious to the coder, and smaller in
  file size. It's also pretty damn easy to change later.
</div>

```html_example

<div class="m1 p1" style="background-color: #BBC;">margin 1 top and bottom</div>
<hr />
<div class="mb2 p1" style="background-color: #BBC;">margin 2 bottom</div>
<hr />
<div class="mt3 p1" style="background-color: #BBC;">margin 3 top</div>
<hr />
<div class="mr1 p1" style="background-color: #BBC;">margin 1 right</div>
<hr />
<div class="ml2 p1" style="background-color: #BBC;">margin 2 left</div>
<hr />
<div class="m-xl p1" style="background-color: #BBC;">margin XL on all sides</div>


```
*/

// Leaves off xl by default
$layout-base-sizes: $xs, $sm, $md, $lg !default;

// TODO: .center is deprecated (by .centered)
.center { margin-left: auto; margin-right: auto;}

// Creates top/bottom standard margin (e.g. .m0, .m1, etc.)
@for $i from 0 through 4 {
  %m#{$i},
  .m#{$i}{
    // If zero margin, then force with !important
    @if $i == 0 { margin-top: $margin-base*$i !important; margin-bottom: $margin-base*$i !important; }
    @else {       margin-top: $margin-base*$i; margin-bottom: $margin-base*$i; }
  }
}

// Creates directional margins (e.g. .ml0, .mt1, etc.)
@each $dir in $base-directions {
  $short: nth($dir, 1);
  $long:  nth($dir, 2);
  @for $i from 0 through 4 {
    %m#{$short}#{$i},
    .m#{$short}#{$i}{
      // If zero margin, then force with !important
      @if $i == 0 { margin-#{$long}: $margin-base*$i !important; }
      @else {       margin-#{$long}: $margin-base*$i; }
    }
  }
}

// Creates all direction standard size margins for simple positioning (e.g. .m-md, .m-xl, etc.)
@each $size in $base-sizes {
  $n: nth($size, 1);
  $s: nth($size, 4);
  %m-#{$n},
  .m-#{$n}{
    margin: $s;
  }
}


/*doc
---
title: "Padding helpers"
name: padding-helpers
category: structure
---

```html_example

<div class="p1" style="background-color: #BBC; display: inline-block;">padding 1 on all sides</div>
<hr />
<div class="pyhalf px1" style="background-color: #BBC; display: inline-block;">padding 1/2 vertically, 1 horizontally</div>
<hr />
<div class="px8" style="background-color: #BBC; display: inline-block;"">padding 8 horizontally</div>
<hr />
<div class="py4" style="background-color: #BBC; display: inline-block;"">padding 4 vertically</div>

```
*/


// Creates all direction basic padding (e.g. .p1, .p2, etc.)
@for $i from 1 through 4 {
  %p#{$i},
  .p#{$i}{ padding: $padding-base*$i; }
  @include at_breakpoint(ltsm) {
    %p#{$i},
    .p#{$i}{ padding-top: $padding-base*($i/2); padding-bottom: $padding-base*($i/2); }
  }
}

// Creates vertical padding helpers (e.g. .py1, .py2, etc.)
@each $size in $layout-base-sizes {
  $s: nth($size, 4);
  %py#{$s},
  .py#{$s}{ padding-top: $padding-base*$s; padding-bottom: $padding-base*$s; }
  @include at_breakpoint(ltsm) {
    %py#{$s},
    .py#{$s}{ padding-top: $padding-base*($s/2); padding-bottom: $padding-base*($s/2); }
  }
}

// Special case half vertical padding
%pyhalf,
.pyhalf { padding-top: $padding-base*0.5;  padding-bottom: $padding-base*0.5; }

// Creates horizontal padding helpers; horizontal padding is halved (e.g. .px1, .px2, etc.)
@each $size in $layout-base-sizes {
  $s: nth($size, 4);
  %px#{$s},
  .px#{$s}{ padding-right: $padding-base*($s/2); padding-left: $padding-base*($s/2); }
}

// Special case half horizontal padding
%pxhalf,
.pxhalf { padding-right: $padding-base*0.25;  padding-left: $padding-base*0.25; }


/*doc
---
title: "Position helpers"
name: position-helpers
category: structure
---

Position elements using micro classes for better control.


```html_example

<div class="pos-rel full-width" style="background-color: #EEE; height: 500px;">
  <div class="pos-abs pos-b pos-r p1 m-lg" style="background-color: #BBC;">
    Absolutely positioned bottom right, margin LG
  </div>
  <div class="pos-abs pos-t pos-l pos-b p1" style="background-color: #BBC;">
    Absolutely positioned left, top, bottom
    <br />
    (to stretch from top to bottom)
  </div>
  <div class="pos-abs pos-center" style="background-color: #BBC; width: 100px; height: 100px;">
    Centered
  </div>
</div>

```
*/

%pos-abs,
.pos-abs { position: absolute; }
%pos-rel,
.pos-rel { position: relative; }
%pos-fix,
.pos-fix { position: fixed;    }

// Creates positional classes (e.g. .pos-r { right: 0; })
@each $dir in $base-directions {
  $short: nth($dir, 1);
  $long:  nth($dir, 2);
  %pos-#{$short},
  .pos-#{$short}{ #{$long}: 0; }
}

%pos-all,
.pos-all { top: 0; left: 0; right: 0; bottom:0; }

%pos-center,
.pos-center {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// TODO: z-index helpers here are technically deprecated by the code below
%z1,
.z1  { z-index: 1; }
%z2,
.z2  { z-index: 2; }
%z5,
.z5  { z-index: 5; }
%z10,
.z10 { z-index: 10; }

/* Creates z index classes and placeholders using base sizes (xs, sm, etc.) */
@each $size in $base-sizes {
  $name:  nth($size, 1);
  $index: nth($size, 4);

  %z-#{$name},
  .z-#{$name}{
    z-index: $index;
  }
}


/*doc
---
title: "Utility helpers"
name: utility-helpers
category: structure
---

```html_example

<p>Horizontal rule</p>
<hr />

<span class="full-width p1" style="background-color: #BBC; display:inline-block;">Full width</span>

<div class="clearfix p1" style="background-color: #EEE;">
  <p>Clearfix: successfully displays a container that contains floated child elements</p>
  <p class="left p1" style="background-color: #BBC;">Float left</p>
  <p class="right p1" style="background-color: #BBC;">Float right</p>
  <p class="centered p1" style="background-color: #BBC; width: 300px;">Centered block content</p>
</div>

```
*/

/* Horizontal rule
   ========================================================================== */
/**
* 1. To keep vertical rhythm, hr uses font-size-base as a height (including
*    1px for the border.
*/

%hr,
hr,
.hr {
  border: none;
  border-bottom: 1px solid $hr-color;
  height: ($font-size-base - 1); /* 1 */
  margin-top: 0;
  margin-bottom: 1rem;
}


/* Layout utility classes
   ========================================================================== */

%full-width,
.full-width{
  width: 100%;
}

%clearfix,
.clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

%right,
.right {
  float: right;
}
%left,
.left {
  float: left;
}

%centered,
.centered {
  margin-left:  auto;
  margin-right: auto;
}

%vertical-t,
.vertical-t {
  vertical-align: top;
}

%vertical-b,
.vertical-b {
  vertical-align: bottom;
}

%vertical-mid,
.vertical-mid {
  vertical-align: middle;
}

%ib,
.ib {
  display: inline-block;
}

/*doc
---
title: "Responsive display"
name: z-responsive-display
category: structure
---

**Responsively show and hide content - use with caution**

`hidden` class will hide class at any breakpoint.

`full-width-xs` forces element to be full width of parent at xs breakpoint

These classes will hide content at defined breakpoints.

For example:
<div class="hidden-xs">
  Something worth hiding
</div>

This div will not show at XS breakpoint. This content still LOADS, however,
so be cognizant of the load impact and use *wisely*.

Responsive display classes:

`hidden-xl` `hidden-lg` `hidden-ltlg` `hidden-md` `hidden-ltmd` `hidden-sm` `hidden-ltsm` `hidden-xs` `hidden-gtxs` `hidden-gtsm`

*/

%hidden,
.hidden{
  display: none !important;
}

@include at_breakpoint(xl)   { .hidden-xl   { display: none !important; } }
@include at_breakpoint(lg)   { .hidden-lg   { display: none !important; } }
@include at_breakpoint(ltlg) { .hidden-ltlg { display: none !important; } }
@include at_breakpoint(md)   { .hidden-md   { display: none !important; } }
@include at_breakpoint(ltmd) { .hidden-ltmd { display: none !important; } }
@include at_breakpoint(sm)   { .hidden-sm   { display: none !important; } }
@include at_breakpoint(ltsm) { .hidden-ltsm { display: none !important; } }
@include at_breakpoint(xs)   { .hidden-xs   { display: none !important; } }
@include at_breakpoint(gtxs) { .hidden-gtxs { display: none !important; } }
@include at_breakpoint(gtsm) { .hidden-gtsm { display: none !important; } }

@include at_breakpoint(xs) {
  .full-width-xs {
    width: 100%;
    margin-left: 0 !important;
    margin-right: 0 !important;
    &:not([class^="px"]):not([class*="px"]):not([class^="py"]):not([class*="py"]) {
      padding-left: 0 !important;
      padding-right: 0 !important;
    }
  }
}