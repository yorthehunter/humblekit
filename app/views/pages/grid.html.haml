%header.container.contain-to_md.m4.text-c
  %h1.h1 Containers and Grid
  %h2.h2.light.text-muted A quick and painless basic framework for containing and gridding content
  %aside.skin-blue-light.p2.round-md
    %p.text-c
      %strong Hot tip:
      Press
      %span.p1.skin-blue.round-sm.js-clickable-letter h
      to toggle the vertical baseline

%hr

%article.container.contain-to_md
  %header
    %h2.h2 Container classes
  %section
    %dl
      %dt
        %pre
          %code.language-css .container
      %dd
        Will pad and "contain" sections of content on the page. More importantly, the <strong>.container</strong> class has built-in breakpoint adjustments. Different viewport sizes will collapse the <strong>.container</strong> to set widths (breakpoints), defined as variables. Try changing your browser window to see what I'm talking about.
      %dt
        %pre
          %code.language-css .contain-to_lg, .contain-to_md, .contain-to_sm, .contain-to_xs
      %dd Extend the <strong>.container</strong> class with one of these classes to force the max-width of a container to a certain breakpoint size. The container will still collapse to smaller sizes, but it will never be larger than the breakpoint in the class name.
      %dt
        %pre
          %code.language-css .flex
      %dd Extend the <strong>.container</strong> class with <strong>.flex</strong> to create a full-width container that still pads appropriately; padding is especially important for small viewports.

%section.m4
  %article.container.contain-to_md
    %header
      %h2.h2 Grids r effin' awesome.
    %section
      %dl
        %dt
          %pre
            %code.language-css .grid
        %dd
          This is a parent class to let it's children know that grids are coming! There's no need to grid everything. If you want block content, don't grid it. If you want gridded content, you bettah use the <strong>.grid</strong> parent class! In other grid systems, you may have seen <strong>.row</strong> use similarly. To me, this is wrong and forgettable. Use <strong>.grid</strong> and there's no question about what the hell you're trying to do.
        %dt
          %pre
            %code.language-css .g
        %dd This super-simple child class sets up a grid column. I could have used <strong>.col</strong> or something, but I just saved the world two extra characters. This class, when combined with one of the following classes, will set up the width and will also set up the gutter between columns.
        %dt
          %pre
            %code.language-css ._1-1 ._1-2 ._2-3 ._5-6 and so on...
        %dd Extend the <strong>.g</strong> class with one of these babies to give it an actual width! Column widths are represented as <em>fractions of the parent width</em>. So <strong>._1-2</strong> is a grid column of one half (or 50%). I chose to limit the fractions to any combination between 1/1 and 6/6. I found that I RARELY used a column of 7/11, so I stopped at sixths for sanity's sake. If you want a smaller column width, all you need to do is nest them in a clever way and there you go: infinite grids. See the following examples for help. You can also use these classes to set up explicit percentage widths of other elements, too. It's a two-for-one deal.
        %dt
          %pre
            %code.language-css ._1-1-sm ._1-2-md ._2-3-lg and so on...
        %dd Are you telling me that you built a time machine... out of a DeLorean? No; what you see is some helpful breakpoint grid classes. Add a breakpoint size to your class and adjust your column width at (and below) that breakpoint. See the examples for more info.
        %dt
          %pre
            %code.language-css .grid-c, .grid-r, .grid-reverse
        %dd Just some grid utility classes; extend <strong>.grid</strong> with these to center the grid, align to the right, or reverse the column order, respectively. Examples follow.
%section
  %header.container
    %h2.h2 Examples

  %article.container.js-grid-test
    .py1 .container - Defaults to a max-width of "xl" breakpoint variable (1400px or 87.5rem)
    .grid
      .g._1-1
        .px2.m1 .g ._1-1
        .grid.m1
          .g._1-2
            .px2.m1 .g ._1-2
            .grid.m1
              .g._1-3
                .p1 .g ._1-3
              .g._2-3
                .p1 .g ._2-3
          .g._1-2
            .px2.m1 .g ._1-2
            .grid.m1
              .g._3-4
                .p1 .g ._3-4
              .g._1-4
                .p1 .g ._1-4

  %article.m2.container.contain-to_lg.js-grid-test
    .py1 .container .contain-to_lg
    .grid
      .g._1-1
        .px2.m1 .g ._1-1
        .grid.grid_r
          .g._1-2
            .p1 .g ._1-2 (grid right)
        .grid.grid_c
          .g._1-2
            .p1 .g ._1-2 (grid center
        .grid.grid_reverse
          .g._1-4
            .p1 #1 (reverse order)
          .g._1-4
            .p1 #2 (reverse order)
          .g._1-4
            .p1 #3 (reverse order)

  %article.m2.container.contain-to_md.js-grid-test
    .py1 .container .contain-to_md
    .grid
      .g._1-1
        .px2.m1
          Use breakpoint sizes in your class name for
          %strong extra joy
        .grid
          .g._1-1-sm._2-3
            .px2.m1 .g ._1-1-sm ._2-3
          .g._1-1-sm._1-3
            .px2.m1 .g ._1-1-sm ._1-3

  %article.m2.container.contain-to_sm.js-grid-test
    .py1 .container .contain-to_sm
    .grid
      .g._1-1
        .px2.m1 .g ._1-1

  %article.m2.container.js-grid-test.flex
    .py1 .container .flex - Flexible container, gridded like a champ.
    .grid.mb1
      .g._1-2
        .px2.m1
          So you
          %strong really
          want 12 columns, eh?
        .grid
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
      .g._1-2
        .px2.m1 Just split up 2 columns 6 times.
        .grid
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
          .g._1-6
            .py1.px1 .g ._1-6
    .grid.m1
      .g._1-3
        .py1.px1 .g ._1-3
      .g._1-3
        .py1.px1 .g ._1-3
      .g._1-3
        .py1.px1 .g ._1-3
    .grid.m1
      .g._1-4
        .py1.px1 .g ._1-4
      .g._1-4
        .py1.px1 .g ._1-4
      .g._1-4
        .py1.px1 .g ._1-4
      .g._1-4
        .py1.px1 .g ._1-4
    .grid
      .g._1-6
        .py1.px1 .g ._1-6
      .g._1-6
        .py1.px1 .g ._1-6
      .g._1-6
        .py1.px1 .g ._1-6
      .g._1-6
        .py1.px1 .g ._1-6
      .g._1-6
        .py1.px1 .g ._1-6
      .g._1-6
        .py1.px1 .g ._1-6